{"ast":null,"code":"// Mock data to simulate external API response\nconst mockExternalTrades=[{// Match for TSLA Pershing trade\ntradeId:'1',tradedate:'2024-11-30',securitysymbol:'TSLA',price:390.00,quantity:1,settlementdate:'2024-12-01',counterparty:'Pershing',dtc_number:'0443'},{// Match for SPOT Pershing trade\ntradeId:'2',tradedate:'2024-11-30',securitysymbol:'SPOT',price:498.00,quantity:363,settlementdate:'2024-12-01',counterparty:'Pershing',dtc_number:'0443'},{// Match for NET Citadel trade\ntradeId:'3',tradedate:'2024-11-30',securitysymbol:'NET',price:115.00,quantity:69,settlementdate:'2024-12-01',counterparty:'Citadel',dtc_number:'0388'},{// Match for NVDA Citadel trade\ntradeId:'4',tradedate:'2024-11-30',securitysymbol:'NVDA',price:140.00,quantity:451,settlementdate:'2024-12-01',counterparty:'Citadel',dtc_number:'0388'},{// Match for SHOP Citadel trade\ntradeId:'5',tradedate:'2024-11-30',securitysymbol:'SHOP',price:120.00,quantity:319,settlementdate:'2024-12-01',counterparty:'Citadel',dtc_number:'0388'},{// Match for SPOT Goldman Sachs trade\ntradeId:'6',tradedate:'2024-11-30',securitysymbol:'SPOT',price:498.00,quantity:437,settlementdate:'2024-12-01',counterparty:'Goldman Sachs',dtc_number:'0005'},{// Match for TSLA Goldman Sachs trade\ntradeId:'7',tradedate:'2024-11-30',securitysymbol:'TSLA',price:390.00,quantity:351,settlementdate:'2024-12-01',counterparty:'Goldman Sachs',dtc_number:'0005'}// No matches for Morgan Stanley and JP Morgan trades to simulate UNMATCHED status\n];export const fetchExternalTrades=async()=>{// Simulate API delay\nawait new Promise(resolve=>setTimeout(resolve,1000));// Return mock data\nreturn mockExternalTrades;};","map":{"version":3,"names":["mockExternalTrades","tradeId","tradedate","securitysymbol","price","quantity","settlementdate","counterparty","dtc_number","fetchExternalTrades","Promise","resolve","setTimeout"],"sources":["/Users/joelaird/TradeRecon/src/services/tradeApi.js"],"sourcesContent":["// Mock data to simulate external API response\nconst mockExternalTrades = [\n  {\n    // Match for TSLA Pershing trade\n    tradeId: '1',\n    tradedate: '2024-11-30',\n    securitysymbol: 'TSLA',\n    price: 390.00,\n    quantity: 1,\n    settlementdate: '2024-12-01',\n    counterparty: 'Pershing',\n    dtc_number: '0443'\n  },\n  {\n    // Match for SPOT Pershing trade\n    tradeId: '2',\n    tradedate: '2024-11-30',\n    securitysymbol: 'SPOT',\n    price: 498.00,\n    quantity: 363,\n    settlementdate: '2024-12-01',\n    counterparty: 'Pershing',\n    dtc_number: '0443'\n  },\n  {\n    // Match for NET Citadel trade\n    tradeId: '3',\n    tradedate: '2024-11-30',\n    securitysymbol: 'NET',\n    price: 115.00,\n    quantity: 69,\n    settlementdate: '2024-12-01',\n    counterparty: 'Citadel',\n    dtc_number: '0388'\n  },\n  {\n    // Match for NVDA Citadel trade\n    tradeId: '4',\n    tradedate: '2024-11-30',\n    securitysymbol: 'NVDA',\n    price: 140.00,\n    quantity: 451,\n    settlementdate: '2024-12-01',\n    counterparty: 'Citadel',\n    dtc_number: '0388'\n  },\n  {\n    // Match for SHOP Citadel trade\n    tradeId: '5',\n    tradedate: '2024-11-30',\n    securitysymbol: 'SHOP',\n    price: 120.00,\n    quantity: 319,\n    settlementdate: '2024-12-01',\n    counterparty: 'Citadel',\n    dtc_number: '0388'\n  },\n  {\n    // Match for SPOT Goldman Sachs trade\n    tradeId: '6',\n    tradedate: '2024-11-30',\n    securitysymbol: 'SPOT',\n    price: 498.00,\n    quantity: 437,\n    settlementdate: '2024-12-01',\n    counterparty: 'Goldman Sachs',\n    dtc_number: '0005'\n  },\n  {\n    // Match for TSLA Goldman Sachs trade\n    tradeId: '7',\n    tradedate: '2024-11-30',\n    securitysymbol: 'TSLA',\n    price: 390.00,\n    quantity: 351,\n    settlementdate: '2024-12-01',\n    counterparty: 'Goldman Sachs',\n    dtc_number: '0005'\n  }\n  // No matches for Morgan Stanley and JP Morgan trades to simulate UNMATCHED status\n];\n\nexport const fetchExternalTrades = async () => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  // Return mock data\n  return mockExternalTrades;\n}; "],"mappings":"AAAA;AACA,KAAM,CAAAA,kBAAkB,CAAG,CACzB,CACE;AACAC,OAAO,CAAE,GAAG,CACZC,SAAS,CAAE,YAAY,CACvBC,cAAc,CAAE,MAAM,CACtBC,KAAK,CAAE,MAAM,CACbC,QAAQ,CAAE,CAAC,CACXC,cAAc,CAAE,YAAY,CAC5BC,YAAY,CAAE,UAAU,CACxBC,UAAU,CAAE,MACd,CAAC,CACD,CACE;AACAP,OAAO,CAAE,GAAG,CACZC,SAAS,CAAE,YAAY,CACvBC,cAAc,CAAE,MAAM,CACtBC,KAAK,CAAE,MAAM,CACbC,QAAQ,CAAE,GAAG,CACbC,cAAc,CAAE,YAAY,CAC5BC,YAAY,CAAE,UAAU,CACxBC,UAAU,CAAE,MACd,CAAC,CACD,CACE;AACAP,OAAO,CAAE,GAAG,CACZC,SAAS,CAAE,YAAY,CACvBC,cAAc,CAAE,KAAK,CACrBC,KAAK,CAAE,MAAM,CACbC,QAAQ,CAAE,EAAE,CACZC,cAAc,CAAE,YAAY,CAC5BC,YAAY,CAAE,SAAS,CACvBC,UAAU,CAAE,MACd,CAAC,CACD,CACE;AACAP,OAAO,CAAE,GAAG,CACZC,SAAS,CAAE,YAAY,CACvBC,cAAc,CAAE,MAAM,CACtBC,KAAK,CAAE,MAAM,CACbC,QAAQ,CAAE,GAAG,CACbC,cAAc,CAAE,YAAY,CAC5BC,YAAY,CAAE,SAAS,CACvBC,UAAU,CAAE,MACd,CAAC,CACD,CACE;AACAP,OAAO,CAAE,GAAG,CACZC,SAAS,CAAE,YAAY,CACvBC,cAAc,CAAE,MAAM,CACtBC,KAAK,CAAE,MAAM,CACbC,QAAQ,CAAE,GAAG,CACbC,cAAc,CAAE,YAAY,CAC5BC,YAAY,CAAE,SAAS,CACvBC,UAAU,CAAE,MACd,CAAC,CACD,CACE;AACAP,OAAO,CAAE,GAAG,CACZC,SAAS,CAAE,YAAY,CACvBC,cAAc,CAAE,MAAM,CACtBC,KAAK,CAAE,MAAM,CACbC,QAAQ,CAAE,GAAG,CACbC,cAAc,CAAE,YAAY,CAC5BC,YAAY,CAAE,eAAe,CAC7BC,UAAU,CAAE,MACd,CAAC,CACD,CACE;AACAP,OAAO,CAAE,GAAG,CACZC,SAAS,CAAE,YAAY,CACvBC,cAAc,CAAE,MAAM,CACtBC,KAAK,CAAE,MAAM,CACbC,QAAQ,CAAE,GAAG,CACbC,cAAc,CAAE,YAAY,CAC5BC,YAAY,CAAE,eAAe,CAC7BC,UAAU,CAAE,MACd,CACA;AAAA,CACD,CAED,MAAO,MAAM,CAAAC,mBAAmB,CAAG,KAAAA,CAAA,GAAY,CAC7C;AACA,KAAM,IAAI,CAAAC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CAEvD;AACA,MAAO,CAAAX,kBAAkB,CAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}