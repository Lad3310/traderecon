{"ast":null,"code":"// Service for handling FICC GSD messaging\nexport const formatMT515Message = trade => {\n  return {\n    header: {\n      password: trade.password,\n      sender: trade.senderId,\n      messageType: '515/000/GSCC',\n      receiver: 'GSCCTRRS'\n    },\n    genl: {\n      seme: generateMessageRef(),\n      messageFunction: 'NEWM',\n      prepDateTime: new Date().toISOString()\n    },\n    confDetails: {\n      tradeDate: trade.tradeDate,\n      settlementDate: trade.settlementDate,\n      price: trade.price,\n      amount: trade.amount\n    }\n  };\n};\nexport const formatMT509Message = status => {\n  return {\n    header: {\n      password: '',\n      sender: 'GSCCTRRS',\n      messageType: '509/000/GSCC',\n      receiver: status.receiverId\n    },\n    genl: {\n      seme: generateMessageRef(),\n      messageFunction: 'INST',\n      prepDateTime: new Date().toISOString()\n    },\n    status: {\n      type: status.type,\n      reason: status.reason\n    }\n  };\n};\nconst generateMessageRef = () => {\n  return Math.random().toString(36).substr(2, 9);\n};","map":{"version":3,"names":["formatMT515Message","trade","header","password","sender","senderId","messageType","receiver","genl","seme","generateMessageRef","messageFunction","prepDateTime","Date","toISOString","confDetails","tradeDate","settlementDate","price","amount","formatMT509Message","status","receiverId","type","reason","Math","random","toString","substr"],"sources":["/Users/joelaird/TradeRecon/src/services/ficcService.js"],"sourcesContent":["// Service for handling FICC GSD messaging\nexport const formatMT515Message = (trade) => {\n  return {\n    header: {\n      password: trade.password,\n      sender: trade.senderId,\n      messageType: '515/000/GSCC',\n      receiver: 'GSCCTRRS'\n    },\n    genl: {\n      seme: generateMessageRef(),\n      messageFunction: 'NEWM',\n      prepDateTime: new Date().toISOString()\n    },\n    confDetails: {\n      tradeDate: trade.tradeDate,\n      settlementDate: trade.settlementDate,\n      price: trade.price,\n      amount: trade.amount\n    }\n  };\n};\n\nexport const formatMT509Message = (status) => {\n  return {\n    header: {\n      password: '',\n      sender: 'GSCCTRRS', \n      messageType: '509/000/GSCC',\n      receiver: status.receiverId\n    },\n    genl: {\n      seme: generateMessageRef(),\n      messageFunction: 'INST',\n      prepDateTime: new Date().toISOString()\n    },\n    status: {\n      type: status.type,\n      reason: status.reason\n    }\n  };\n};\n\nconst generateMessageRef = () => {\n  return Math.random().toString(36).substr(2, 9);\n}; "],"mappings":"AAAA;AACA,OAAO,MAAMA,kBAAkB,GAAIC,KAAK,IAAK;EAC3C,OAAO;IACLC,MAAM,EAAE;MACNC,QAAQ,EAAEF,KAAK,CAACE,QAAQ;MACxBC,MAAM,EAAEH,KAAK,CAACI,QAAQ;MACtBC,WAAW,EAAE,cAAc;MAC3BC,QAAQ,EAAE;IACZ,CAAC;IACDC,IAAI,EAAE;MACJC,IAAI,EAAEC,kBAAkB,CAAC,CAAC;MAC1BC,eAAe,EAAE,MAAM;MACvBC,YAAY,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACvC,CAAC;IACDC,WAAW,EAAE;MACXC,SAAS,EAAEf,KAAK,CAACe,SAAS;MAC1BC,cAAc,EAAEhB,KAAK,CAACgB,cAAc;MACpCC,KAAK,EAAEjB,KAAK,CAACiB,KAAK;MAClBC,MAAM,EAAElB,KAAK,CAACkB;IAChB;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAIC,MAAM,IAAK;EAC5C,OAAO;IACLnB,MAAM,EAAE;MACNC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,UAAU;MAClBE,WAAW,EAAE,cAAc;MAC3BC,QAAQ,EAAEc,MAAM,CAACC;IACnB,CAAC;IACDd,IAAI,EAAE;MACJC,IAAI,EAAEC,kBAAkB,CAAC,CAAC;MAC1BC,eAAe,EAAE,MAAM;MACvBC,YAAY,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACvC,CAAC;IACDO,MAAM,EAAE;MACNE,IAAI,EAAEF,MAAM,CAACE,IAAI;MACjBC,MAAM,EAAEH,MAAM,CAACG;IACjB;EACF,CAAC;AACH,CAAC;AAED,MAAMd,kBAAkB,GAAGA,CAAA,KAAM;EAC/B,OAAOe,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;AAChD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}