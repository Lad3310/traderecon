{"ast":null,"code":"var _jsxFileName = \"/Users/joelaird/TradeRecon/src/components/TradeTable/TradeTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../../lib/supabaseClient';\nimport { formatMT515Message, formatMT509Message } from '../../services/ficcService';\nimport { matchTradeToFICCMessage } from '../../services/matchingService';\nimport TradeMessage from '../TradeMessage/TradeMessage';\nimport './TradeTable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TradeTable = () => {\n  _s();\n  const [trades, setTrades] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [matchingStatus, setMatchingStatus] = useState({});\n  useEffect(() => {\n    loadTrades();\n  }, []);\n  const loadTrades = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('trades').select('*').order('trade_date', {\n      ascending: false\n    });\n    if (error) {\n      console.error('Error loading trades:', error);\n    } else {\n      setTrades(data);\n    }\n  };\n  const handleNewMessage = async message => {\n    // Add to messages\n    setMessages(prev => [...prev, message]);\n\n    // Try to match to existing trade\n    const matchedTrade = await matchTradeToFICCMessage(message);\n    if (matchedTrade) {\n      setMatchingStatus(prev => ({\n        ...prev,\n        [matchedTrade.id]: {\n          status: 'matched',\n          message: message\n        }\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trade-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Trade Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Security\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"FICC Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Match Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: trades.map(trade => {\n          var _matchingStatus$trade;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: trade.trade_date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: trade.security_id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: trade.amount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: trade.ficc_status || 'Pending'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: ((_matchingStatus$trade = matchingStatus[trade.id]) === null || _matchingStatus$trade === void 0 ? void 0 : _matchingStatus$trade.status) || 'Unmatched'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this)]\n          }, trade.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(TradeMessage, {\n        message: msg\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(TradeTable, \"6Q89ojkMRUAm0lAlzkTr8Nql05g=\");\n_c = TradeTable;\nexport default TradeTable;\nvar _c;\n$RefreshReg$(_c, \"TradeTable\");","map":{"version":3,"names":["React","useState","useEffect","supabase","formatMT515Message","formatMT509Message","matchTradeToFICCMessage","TradeMessage","jsxDEV","_jsxDEV","TradeTable","_s","trades","setTrades","messages","setMessages","matchingStatus","setMatchingStatus","loadTrades","data","error","from","select","order","ascending","console","handleNewMessage","message","prev","matchedTrade","id","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","trade","_matchingStatus$trade","trade_date","security_id","amount","ficc_status","msg","i","_c","$RefreshReg$"],"sources":["/Users/joelaird/TradeRecon/src/components/TradeTable/TradeTable.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../../lib/supabaseClient';\nimport { formatMT515Message, formatMT509Message } from '../../services/ficcService';\nimport { matchTradeToFICCMessage } from '../../services/matchingService';\nimport TradeMessage from '../TradeMessage/TradeMessage';\nimport './TradeTable.css';\n\nconst TradeTable = () => {\n  const [trades, setTrades] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [matchingStatus, setMatchingStatus] = useState({});\n\n  useEffect(() => {\n    loadTrades();\n  }, []);\n\n  const loadTrades = async () => {\n    const { data, error } = await supabase\n      .from('trades')\n      .select('*')\n      .order('trade_date', { ascending: false });\n\n    if (error) {\n      console.error('Error loading trades:', error);\n    } else {\n      setTrades(data);\n    }\n  };\n\n  const handleNewMessage = async (message) => {\n    // Add to messages\n    setMessages(prev => [...prev, message]);\n    \n    // Try to match to existing trade\n    const matchedTrade = await matchTradeToFICCMessage(message);\n    \n    if (matchedTrade) {\n      setMatchingStatus(prev => ({\n        ...prev,\n        [matchedTrade.id]: {\n          status: 'matched',\n          message: message\n        }\n      }));\n    }\n  };\n\n  return (\n    <div className=\"trade-table\">\n      <table>\n        <thead>\n          <tr>\n            <th>Trade Date</th>\n            <th>Security</th>\n            <th>Amount</th>\n            <th>FICC Status</th>\n            <th>Match Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {trades.map(trade => (\n            <tr key={trade.id}>\n              <td>{trade.trade_date}</td>\n              <td>{trade.security_id}</td>\n              <td>{trade.amount}</td>\n              <td>{trade.ficc_status || 'Pending'}</td>\n              <td>{matchingStatus[trade.id]?.status || 'Unmatched'}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <div className=\"messages\">\n        {messages.map((msg, i) => (\n          <TradeMessage key={i} message={msg} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TradeTable; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}