{"ast":null,"code":"// Mock data to simulate external API response\nconst mockExternalTrades = [{\n  // Exact match with TSLA Pershing trade\n  tradeId: '1',\n  tradedate: '2024-11-30',\n  securitysymbol: 'TSLA',\n  price: 390.00,\n  quantity: 1,\n  settlementdate: '2024-12-01',\n  counterparty: 'Pershing',\n  dtc_number: '0443',\n  cusip: '88160R101'\n}, {\n  // Price mismatch with SPOT Citadel trade\n  tradeId: '2',\n  tradedate: '2024-11-30',\n  securitysymbol: 'SPOT',\n  price: 495.50,\n  // Different price (498.00 in internal)\n  quantity: 268,\n  settlementdate: '2024-12-01',\n  counterparty: 'Citadel',\n  dtc_number: '0388',\n  cusip: '83169Y108'\n}, {\n  // Quantity mismatch with NVDA Citadel trade\n  tradeId: '3',\n  tradedate: '2024-11-30',\n  securitysymbol: 'NVDA',\n  price: 140.00,\n  quantity: 450,\n  // Different quantity (451 in internal)\n  settlementdate: '2024-12-01',\n  counterparty: 'Citadel',\n  dtc_number: '0388',\n  cusip: '67066G104'\n}, {\n  // Settlement date mismatch with SHOP Citadel trade\n  tradeId: '4',\n  tradedate: '2024-11-30',\n  securitysymbol: 'SHOP',\n  price: 120.00,\n  quantity: 319,\n  settlementdate: '2024-12-02',\n  // Different settlement date (12/01 in internal)\n  counterparty: 'Citadel',\n  dtc_number: '0388',\n  cusip: '82509L107'\n}, {\n  // Multiple mismatches with SPOT Goldman trade\n  tradeId: '5',\n  tradedate: '2024-11-30',\n  securitysymbol: 'SPOT',\n  price: 496.50,\n  // Different price\n  quantity: 435,\n  // Different quantity\n  settlementdate: '2024-12-02',\n  // Different settlement date\n  counterparty: 'Goldman Sachs',\n  dtc_number: '0005',\n  cusip: '83169Y108'\n}, {\n  // Exact match with TSLA Goldman trade\n  tradeId: '6',\n  tradedate: '2024-11-30',\n  securitysymbol: 'TSLA',\n  price: 390.00,\n  quantity: 351,\n  settlementdate: '2024-12-01',\n  counterparty: 'Goldman Sachs',\n  dtc_number: '0005',\n  cusip: '88160R101'\n}\n// No matching trades for Morgan Stanley and JP Morgan trades\n// This will simulate the UNMATCHED status\n];\nexport const fetchExternalTrades = async () => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Return mock data\n  return mockExternalTrades;\n};","map":{"version":3,"names":["mockExternalTrades","tradeId","tradedate","securitysymbol","price","quantity","settlementdate","counterparty","dtc_number","cusip","fetchExternalTrades","Promise","resolve","setTimeout"],"sources":["/Users/joelaird/TradeRecon/src/services/tradeApi.js"],"sourcesContent":["// Mock data to simulate external API response\nconst mockExternalTrades = [\n  {\n    // Exact match with TSLA Pershing trade\n    tradeId: '1',\n    tradedate: '2024-11-30',\n    securitysymbol: 'TSLA',\n    price: 390.00,\n    quantity: 1,\n    settlementdate: '2024-12-01',\n    counterparty: 'Pershing',\n    dtc_number: '0443',\n    cusip: '88160R101'\n  },\n  {\n    // Price mismatch with SPOT Citadel trade\n    tradeId: '2',\n    tradedate: '2024-11-30',\n    securitysymbol: 'SPOT',\n    price: 495.50,  // Different price (498.00 in internal)\n    quantity: 268,\n    settlementdate: '2024-12-01',\n    counterparty: 'Citadel',\n    dtc_number: '0388',\n    cusip: '83169Y108'\n  },\n  {\n    // Quantity mismatch with NVDA Citadel trade\n    tradeId: '3',\n    tradedate: '2024-11-30',\n    securitysymbol: 'NVDA',\n    price: 140.00,\n    quantity: 450,  // Different quantity (451 in internal)\n    settlementdate: '2024-12-01',\n    counterparty: 'Citadel',\n    dtc_number: '0388',\n    cusip: '67066G104'\n  },\n  {\n    // Settlement date mismatch with SHOP Citadel trade\n    tradeId: '4',\n    tradedate: '2024-11-30',\n    securitysymbol: 'SHOP',\n    price: 120.00,\n    quantity: 319,\n    settlementdate: '2024-12-02',  // Different settlement date (12/01 in internal)\n    counterparty: 'Citadel',\n    dtc_number: '0388',\n    cusip: '82509L107'\n  },\n  {\n    // Multiple mismatches with SPOT Goldman trade\n    tradeId: '5',\n    tradedate: '2024-11-30',\n    securitysymbol: 'SPOT',\n    price: 496.50,  // Different price\n    quantity: 435,  // Different quantity\n    settlementdate: '2024-12-02',  // Different settlement date\n    counterparty: 'Goldman Sachs',\n    dtc_number: '0005',\n    cusip: '83169Y108'\n  },\n  {\n    // Exact match with TSLA Goldman trade\n    tradeId: '6',\n    tradedate: '2024-11-30',\n    securitysymbol: 'TSLA',\n    price: 390.00,\n    quantity: 351,\n    settlementdate: '2024-12-01',\n    counterparty: 'Goldman Sachs',\n    dtc_number: '0005',\n    cusip: '88160R101'\n  }\n  // No matching trades for Morgan Stanley and JP Morgan trades\n  // This will simulate the UNMATCHED status\n];\n\nexport const fetchExternalTrades = async () => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  // Return mock data\n  return mockExternalTrades;\n}; "],"mappings":"AAAA;AACA,MAAMA,kBAAkB,GAAG,CACzB;EACE;EACAC,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,CAAC;EACXC,cAAc,EAAE,YAAY;EAC5BC,YAAY,EAAE,UAAU;EACxBC,UAAU,EAAE,MAAM;EAClBC,KAAK,EAAE;AACT,CAAC,EACD;EACE;EACAR,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,MAAM;EAAG;EAChBC,QAAQ,EAAE,GAAG;EACbC,cAAc,EAAE,YAAY;EAC5BC,YAAY,EAAE,SAAS;EACvBC,UAAU,EAAE,MAAM;EAClBC,KAAK,EAAE;AACT,CAAC,EACD;EACE;EACAR,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,GAAG;EAAG;EAChBC,cAAc,EAAE,YAAY;EAC5BC,YAAY,EAAE,SAAS;EACvBC,UAAU,EAAE,MAAM;EAClBC,KAAK,EAAE;AACT,CAAC,EACD;EACE;EACAR,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,GAAG;EACbC,cAAc,EAAE,YAAY;EAAG;EAC/BC,YAAY,EAAE,SAAS;EACvBC,UAAU,EAAE,MAAM;EAClBC,KAAK,EAAE;AACT,CAAC,EACD;EACE;EACAR,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,MAAM;EAAG;EAChBC,QAAQ,EAAE,GAAG;EAAG;EAChBC,cAAc,EAAE,YAAY;EAAG;EAC/BC,YAAY,EAAE,eAAe;EAC7BC,UAAU,EAAE,MAAM;EAClBC,KAAK,EAAE;AACT,CAAC,EACD;EACE;EACAR,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,GAAG;EACbC,cAAc,EAAE,YAAY;EAC5BC,YAAY,EAAE,eAAe;EAC7BC,UAAU,EAAE,MAAM;EAClBC,KAAK,EAAE;AACT;AACA;AACA;AAAA,CACD;AAED,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C;EACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEvD;EACA,OAAOZ,kBAAkB;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}