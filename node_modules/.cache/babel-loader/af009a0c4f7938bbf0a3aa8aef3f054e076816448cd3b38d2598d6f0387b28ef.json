{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { supabase, signInAnonymously } from '../lib/supabaseClient';\nexport const useContacts = () => {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [session, setSession] = useState(null);\n\n  // Handle authentication\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        // Check for existing session\n        const {\n          data: {\n            session: existingSession\n          }\n        } = await supabase.auth.getSession();\n        if (existingSession) {\n          setSession(existingSession);\n          return;\n        }\n        // Sign in anonymously if no session exists\n        const newSession = await signInAnonymously();\n        setSession(newSession);\n      } catch (err) {\n        console.error('Auth error:', err);\n        setError('Authentication failed. Please try again.');\n      }\n    };\n    initAuth();\n  }, []);\n\n  // Fetch contacts only after authentication\n  useEffect(() => {\n    if (session) {\n      fetchContacts();\n    }\n  }, [session]);\n\n  // Fetch all contacts\n  const fetchContacts = async () => {\n    try {\n      setLoading(true);\n      setError(null); // Clear any previous errors\n\n      // Check if supabase is initialized\n      if (!supabase) {\n        throw new Error('Supabase client is not initialized');\n      }\n      const {\n        data,\n        error: supabaseError\n      } = await supabase.from('contacts').select('*').order('created_at', {\n        ascending: false\n      });\n      if (supabaseError) {\n        console.error('Supabase error:', supabaseError);\n        throw new Error(supabaseError.message);\n      }\n      setContacts(data || []);\n    } catch (err) {\n      console.error('Error fetching contacts:', err);\n      setError(err.message || 'Failed to load contacts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add new contact\n  const addContact = async newContact => {\n    try {\n      setError(null);\n      const {\n        data,\n        error: supabaseError\n      } = await supabase.from('contacts').insert([newContact]).select();\n      if (supabaseError) throw new Error(supabaseError.message);\n      setContacts(prev => [data[0], ...prev]);\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Error adding contact:', err);\n      setError(err.message);\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n\n  // Update contact\n  const updateContact = async (id, updates) => {\n    try {\n      setError(null);\n      const {\n        data,\n        error: supabaseError\n      } = await supabase.from('contacts').update(updates).eq('id', id).select();\n      if (supabaseError) throw new Error(supabaseError.message);\n      setContacts(prev => prev.map(contact => contact.id === id ? data[0] : contact));\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Error updating contact:', err);\n      setError(err.message);\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n\n  // Delete contact\n  const deleteContact = async id => {\n    try {\n      setError(null);\n      const {\n        error: supabaseError\n      } = await supabase.from('contacts').delete().eq('id', id);\n      if (supabaseError) throw new Error(supabaseError.message);\n      setContacts(prev => prev.filter(contact => contact.id !== id));\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Error deleting contact:', err);\n      setError(err.message);\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n  return {\n    contacts,\n    loading,\n    error,\n    addContact,\n    updateContact,\n    deleteContact,\n    refreshContacts: fetchContacts\n  };\n};\n_s(useContacts, \"5MIhlIsf2dm/Y5ikqLVzwBVEt7A=\");","map":{"version":3,"names":["useState","useEffect","supabase","signInAnonymously","useContacts","_s","contacts","setContacts","loading","setLoading","error","setError","session","setSession","initAuth","data","existingSession","auth","getSession","newSession","err","console","fetchContacts","Error","supabaseError","from","select","order","ascending","message","addContact","newContact","insert","prev","success","updateContact","id","updates","update","eq","map","contact","deleteContact","delete","filter","refreshContacts"],"sources":["/Users/joelaird/TradeRecon/src/hooks/useContacts.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase, signInAnonymously } from '../lib/supabaseClient';\n\nexport const useContacts = () => {\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [session, setSession] = useState(null);\n\n  // Handle authentication\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        // Check for existing session\n        const { data: { session: existingSession } } = await supabase.auth.getSession();\n        if (existingSession) {\n          setSession(existingSession);\n          return;\n        }\n        // Sign in anonymously if no session exists\n        const newSession = await signInAnonymously();\n        setSession(newSession);\n      } catch (err) {\n        console.error('Auth error:', err);\n        setError('Authentication failed. Please try again.');\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  // Fetch contacts only after authentication\n  useEffect(() => {\n    if (session) {\n      fetchContacts();\n    }\n  }, [session]);\n\n  // Fetch all contacts\n  const fetchContacts = async () => {\n    try {\n      setLoading(true);\n      setError(null); // Clear any previous errors\n      \n      // Check if supabase is initialized\n      if (!supabase) {\n        throw new Error('Supabase client is not initialized');\n      }\n\n      const { data, error: supabaseError } = await supabase\n        .from('contacts')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (supabaseError) {\n        console.error('Supabase error:', supabaseError);\n        throw new Error(supabaseError.message);\n      }\n\n      setContacts(data || []);\n    } catch (err) {\n      console.error('Error fetching contacts:', err);\n      setError(err.message || 'Failed to load contacts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add new contact\n  const addContact = async (newContact) => {\n    try {\n      setError(null);\n      const { data, error: supabaseError } = await supabase\n        .from('contacts')\n        .insert([newContact])\n        .select();\n\n      if (supabaseError) throw new Error(supabaseError.message);\n      setContacts(prev => [data[0], ...prev]);\n      return { success: true };\n    } catch (err) {\n      console.error('Error adding contact:', err);\n      setError(err.message);\n      return { success: false, error: err.message };\n    }\n  };\n\n  // Update contact\n  const updateContact = async (id, updates) => {\n    try {\n      setError(null);\n      const { data, error: supabaseError } = await supabase\n        .from('contacts')\n        .update(updates)\n        .eq('id', id)\n        .select();\n\n      if (supabaseError) throw new Error(supabaseError.message);\n      setContacts(prev => prev.map(contact => \n        contact.id === id ? data[0] : contact\n      ));\n      return { success: true };\n    } catch (err) {\n      console.error('Error updating contact:', err);\n      setError(err.message);\n      return { success: false, error: err.message };\n    }\n  };\n\n  // Delete contact\n  const deleteContact = async (id) => {\n    try {\n      setError(null);\n      const { error: supabaseError } = await supabase\n        .from('contacts')\n        .delete()\n        .eq('id', id);\n\n      if (supabaseError) throw new Error(supabaseError.message);\n      setContacts(prev => prev.filter(contact => contact.id !== id));\n      return { success: true };\n    } catch (err) {\n      console.error('Error deleting contact:', err);\n      setError(err.message);\n      return { success: false, error: err.message };\n    }\n  };\n\n  return {\n    contacts,\n    loading,\n    error,\n    addContact,\n    updateContact,\n    deleteContact,\n    refreshContacts: fetchContacts\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}