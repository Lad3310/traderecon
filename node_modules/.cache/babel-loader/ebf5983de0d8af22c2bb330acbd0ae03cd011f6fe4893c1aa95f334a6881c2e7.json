{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabaseClient';\nexport const useContacts = () => {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch all contacts\n  const fetchContacts = async () => {\n    try {\n      setLoading(true);\n      setError(null); // Clear any previous errors\n\n      // Check if supabase is initialized\n      if (!supabase) {\n        throw new Error('Supabase client is not initialized');\n      }\n      const {\n        data,\n        error: supabaseError\n      } = await supabase.from('contacts').select('*').order('created_at', {\n        ascending: false\n      });\n      if (supabaseError) {\n        console.error('Supabase error:', supabaseError);\n        throw new Error(supabaseError.message);\n      }\n      setContacts(data || []);\n    } catch (err) {\n      console.error('Error fetching contacts:', err);\n      setError(err.message || 'Failed to load contacts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add new contact\n  const addContact = async newContact => {\n    try {\n      setError(null);\n      const {\n        data,\n        error: supabaseError\n      } = await supabase.from('contacts').insert([newContact]).select();\n      if (supabaseError) throw new Error(supabaseError.message);\n      setContacts(prev => [data[0], ...prev]);\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Error adding contact:', err);\n      setError(err.message);\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n\n  // Update contact\n  const updateContact = async (id, updates) => {\n    try {\n      setError(null);\n      const {\n        data,\n        error: supabaseError\n      } = await supabase.from('contacts').update(updates).eq('id', id).select();\n      if (supabaseError) throw new Error(supabaseError.message);\n      setContacts(prev => prev.map(contact => contact.id === id ? data[0] : contact));\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Error updating contact:', err);\n      setError(err.message);\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n\n  // Delete contact\n  const deleteContact = async id => {\n    try {\n      setError(null);\n      const {\n        error: supabaseError\n      } = await supabase.from('contacts').delete().eq('id', id);\n      if (supabaseError) throw new Error(supabaseError.message);\n      setContacts(prev => prev.filter(contact => contact.id !== id));\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Error deleting contact:', err);\n      setError(err.message);\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n\n  // Fetch contacts on component mount\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n  return {\n    contacts,\n    loading,\n    error,\n    addContact,\n    updateContact,\n    deleteContact,\n    refreshContacts: fetchContacts\n  };\n};\n_s(useContacts, \"7pjivTfx4GY3jCOsbtmEhlleMPE=\");","map":{"version":3,"names":["useState","useEffect","supabase","useContacts","_s","contacts","setContacts","loading","setLoading","error","setError","fetchContacts","Error","data","supabaseError","from","select","order","ascending","console","message","err","addContact","newContact","insert","prev","success","updateContact","id","updates","update","eq","map","contact","deleteContact","delete","filter","refreshContacts"],"sources":["/Users/joelaird/TradeRecon/src/hooks/useContacts.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabaseClient';\n\nexport const useContacts = () => {\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch all contacts\n  const fetchContacts = async () => {\n    try {\n      setLoading(true);\n      setError(null); // Clear any previous errors\n      \n      // Check if supabase is initialized\n      if (!supabase) {\n        throw new Error('Supabase client is not initialized');\n      }\n\n      const { data, error: supabaseError } = await supabase\n        .from('contacts')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (supabaseError) {\n        console.error('Supabase error:', supabaseError);\n        throw new Error(supabaseError.message);\n      }\n\n      setContacts(data || []);\n    } catch (err) {\n      console.error('Error fetching contacts:', err);\n      setError(err.message || 'Failed to load contacts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add new contact\n  const addContact = async (newContact) => {\n    try {\n      setError(null);\n      const { data, error: supabaseError } = await supabase\n        .from('contacts')\n        .insert([newContact])\n        .select();\n\n      if (supabaseError) throw new Error(supabaseError.message);\n      setContacts(prev => [data[0], ...prev]);\n      return { success: true };\n    } catch (err) {\n      console.error('Error adding contact:', err);\n      setError(err.message);\n      return { success: false, error: err.message };\n    }\n  };\n\n  // Update contact\n  const updateContact = async (id, updates) => {\n    try {\n      setError(null);\n      const { data, error: supabaseError } = await supabase\n        .from('contacts')\n        .update(updates)\n        .eq('id', id)\n        .select();\n\n      if (supabaseError) throw new Error(supabaseError.message);\n      setContacts(prev => prev.map(contact => \n        contact.id === id ? data[0] : contact\n      ));\n      return { success: true };\n    } catch (err) {\n      console.error('Error updating contact:', err);\n      setError(err.message);\n      return { success: false, error: err.message };\n    }\n  };\n\n  // Delete contact\n  const deleteContact = async (id) => {\n    try {\n      setError(null);\n      const { error: supabaseError } = await supabase\n        .from('contacts')\n        .delete()\n        .eq('id', id);\n\n      if (supabaseError) throw new Error(supabaseError.message);\n      setContacts(prev => prev.filter(contact => contact.id !== id));\n      return { success: true };\n    } catch (err) {\n      console.error('Error deleting contact:', err);\n      setError(err.message);\n      return { success: false, error: err.message };\n    }\n  };\n\n  // Fetch contacts on component mount\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  return {\n    contacts,\n    loading,\n    error,\n    addContact,\n    updateContact,\n    deleteContact,\n    refreshContacts: fetchContacts\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}