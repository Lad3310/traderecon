{"ast":null,"code":"import _objectSpread from\"/Users/joelaird/TradeRecon/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect}from'react';import{fetchInternalTrades}from'../services/supabase';import{fetchExternalTrades}from'../services/tradeApi';import{compareTrades,findMatchingTrade}from'../services/tradeComparison';export const useTrades=()=>{const[reconciliationData,setReconciliationData]=useState([]);const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[internalTrades,setInternalTrades]=useState(null);const[externalTrades,setExternalTrades]=useState(null);// Fetch both internal and external trades\nuseEffect(()=>{const fetchTrades=async()=>{try{setIsLoading(true);const[internal,external]=await Promise.all([fetchInternalTrades(),fetchExternalTrades()]);setInternalTrades(internal);setExternalTrades(external);}catch(err){setError(err);console.error('Error fetching trades:',err);}finally{setIsLoading(false);}};fetchTrades();},[]);// Process trades when both are available\nuseEffect(()=>{if(internalTrades&&externalTrades){console.log('Internal Trades:',internalTrades);console.log('External Trades:',externalTrades);const comparedData=internalTrades.map(intTrade=>{var _intTrade$comparison_;const matchingTrade=((_intTrade$comparison_=intTrade.comparison_status)===null||_intTrade$comparison_===void 0?void 0:_intTrade$comparison_.toUpperCase())==='MATCHED'?findMatchingTrade(intTrade,externalTrades):null;console.log(\"Trade \".concat(intTrade.securitysymbol,\":\"),{status:intTrade.comparison_status,hasMatch:!!matchingTrade,matchingTrade});const comparison=matchingTrade?compareTrades(intTrade,matchingTrade):null;return _objectSpread(_objectSpread({},intTrade),{},{matchingTrade,comparison,hasBreak:(comparison===null||comparison===void 0?void 0:comparison.hasDiscrepancy)||!matchingTrade});});console.log('Compared Data:',comparedData);setReconciliationData(comparedData);}},[internalTrades,externalTrades]);console.log('Reconciliation Data:',reconciliationData);return{trades:reconciliationData,isLoading,error};};","map":{"version":3,"names":["useState","useEffect","fetchInternalTrades","fetchExternalTrades","compareTrades","findMatchingTrade","useTrades","reconciliationData","setReconciliationData","isLoading","setIsLoading","error","setError","internalTrades","setInternalTrades","externalTrades","setExternalTrades","fetchTrades","internal","external","Promise","all","err","console","log","comparedData","map","intTrade","_intTrade$comparison_","matchingTrade","comparison_status","toUpperCase","concat","securitysymbol","status","hasMatch","comparison","_objectSpread","hasBreak","hasDiscrepancy","trades"],"sources":["/Users/joelaird/TradeRecon/src/hooks/useTrades.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { fetchInternalTrades } from '../services/supabase'\nimport { fetchExternalTrades } from '../services/tradeApi'\nimport { compareTrades, findMatchingTrade } from '../services/tradeComparison'\n\nexport const useTrades = () => {\n  const [reconciliationData, setReconciliationData] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [internalTrades, setInternalTrades] = useState(null)\n  const [externalTrades, setExternalTrades] = useState(null)\n\n  // Fetch both internal and external trades\n  useEffect(() => {\n    const fetchTrades = async () => {\n      try {\n        setIsLoading(true)\n        const [internal, external] = await Promise.all([\n          fetchInternalTrades(),\n          fetchExternalTrades()\n        ])\n        setInternalTrades(internal)\n        setExternalTrades(external)\n      } catch (err) {\n        setError(err)\n        console.error('Error fetching trades:', err)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchTrades()\n  }, [])\n\n  // Process trades when both are available\n  useEffect(() => {\n    if (internalTrades && externalTrades) {\n      console.log('Internal Trades:', internalTrades)\n      console.log('External Trades:', externalTrades)\n      \n      const comparedData = internalTrades.map(intTrade => {\n        const matchingTrade = intTrade.comparison_status?.toUpperCase() === 'MATCHED' \n          ? findMatchingTrade(intTrade, externalTrades)\n          : null;\n\n        console.log(`Trade ${intTrade.securitysymbol}:`, {\n          status: intTrade.comparison_status,\n          hasMatch: !!matchingTrade,\n          matchingTrade\n        });\n        \n        const comparison = matchingTrade ? compareTrades(intTrade, matchingTrade) : null;\n        \n        return {\n          ...intTrade,\n          matchingTrade,\n          comparison,\n          hasBreak: comparison?.hasDiscrepancy || !matchingTrade\n        };\n      });\n      \n      console.log('Compared Data:', comparedData);\n      setReconciliationData(comparedData);\n    }\n  }, [internalTrades, externalTrades]);\n\n  console.log('Reconciliation Data:', reconciliationData)\n\n  return {\n    trades: reconciliationData,\n    isLoading,\n    error\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}