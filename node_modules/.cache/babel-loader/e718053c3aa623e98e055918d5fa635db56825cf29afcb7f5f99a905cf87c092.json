{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchInternalTrades } from '../services/supabase';\nimport { fetchExternalTrades } from '../services/tradeApi';\nimport { compareTrades, findMatchingTrade } from '../services/tradeComparison';\nexport const useTrades = () => {\n  _s();\n  const [reconciliationData, setReconciliationData] = useState([]);\n  const {\n    data: internalTrades,\n    error: internalError,\n    isLoading: internalLoading\n  } = useQuery({\n    queryKey: ['internalTrades'],\n    queryFn: fetchInternalTrades\n  });\n  const {\n    data: externalTrades,\n    error: externalError,\n    isLoading: externalLoading\n  } = useQuery({\n    queryKey: ['externalTrades'],\n    queryFn: fetchExternalTrades\n  });\n  useEffect(() => {\n    if (internalTrades && externalTrades) {\n      console.log('Internal Trades:', internalTrades);\n      console.log('External Trades:', externalTrades);\n      const comparedData = internalTrades.map(intTrade => {\n        var _intTrade$comparison_;\n        const matchingTrade = ((_intTrade$comparison_ = intTrade.comparison_status) === null || _intTrade$comparison_ === void 0 ? void 0 : _intTrade$comparison_.toUpperCase()) === 'MATCHED' ? findMatchingTrade(intTrade, externalTrades) : null;\n        console.log(`Trade ${intTrade.securitysymbol}:`, {\n          status: intTrade.comparison_status,\n          hasMatch: !!matchingTrade,\n          matchingTrade\n        });\n        const comparison = matchingTrade ? compareTrades(intTrade, matchingTrade) : null;\n        return {\n          ...intTrade,\n          matchingTrade,\n          comparison,\n          hasBreak: (comparison === null || comparison === void 0 ? void 0 : comparison.hasDiscrepancy) || !matchingTrade\n        };\n      });\n      console.log('Compared Data:', comparedData);\n      setReconciliationData(comparedData);\n    }\n  }, [internalTrades, externalTrades]);\n  console.log('Reconciliation Data:', reconciliationData);\n  return {\n    trades: reconciliationData,\n    isLoading: internalLoading || externalLoading,\n    error: internalError || externalError\n  };\n};\n_s(useTrades, \"7Mey/mfaBxSbd6WIFiqplJUyiWU=\", false, function () {\n  return [useQuery, useQuery];\n});","map":{"version":3,"names":["useState","useEffect","useQuery","fetchInternalTrades","fetchExternalTrades","compareTrades","findMatchingTrade","useTrades","_s","reconciliationData","setReconciliationData","data","internalTrades","error","internalError","isLoading","internalLoading","queryKey","queryFn","externalTrades","externalError","externalLoading","console","log","comparedData","map","intTrade","_intTrade$comparison_","matchingTrade","comparison_status","toUpperCase","securitysymbol","status","hasMatch","comparison","hasBreak","hasDiscrepancy","trades"],"sources":["/Users/joelaird/TradeRecon/src/hooks/useTrades.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport { fetchInternalTrades } from '../services/supabase'\nimport { fetchExternalTrades } from '../services/tradeApi'\nimport { compareTrades, findMatchingTrade } from '../services/tradeComparison'\n\nexport const useTrades = () => {\n  const [reconciliationData, setReconciliationData] = useState([])\n\n  const { \n    data: internalTrades,\n    error: internalError,\n    isLoading: internalLoading\n  } = useQuery({\n    queryKey: ['internalTrades'],\n    queryFn: fetchInternalTrades\n  })\n\n  const {\n    data: externalTrades,\n    error: externalError,\n    isLoading: externalLoading\n  } = useQuery({\n    queryKey: ['externalTrades'],\n    queryFn: fetchExternalTrades\n  })\n\n  useEffect(() => {\n    if (internalTrades && externalTrades) {\n      console.log('Internal Trades:', internalTrades)\n      console.log('External Trades:', externalTrades)\n      \n      const comparedData = internalTrades.map(intTrade => {\n        const matchingTrade = intTrade.comparison_status?.toUpperCase() === 'MATCHED' \n          ? findMatchingTrade(intTrade, externalTrades)\n          : null;\n\n        console.log(`Trade ${intTrade.securitysymbol}:`, {\n          status: intTrade.comparison_status,\n          hasMatch: !!matchingTrade,\n          matchingTrade\n        });\n        \n        const comparison = matchingTrade ? compareTrades(intTrade, matchingTrade) : null;\n        \n        return {\n          ...intTrade,\n          matchingTrade,\n          comparison,\n          hasBreak: comparison?.hasDiscrepancy || !matchingTrade\n        };\n      });\n      \n      console.log('Compared Data:', comparedData);\n      setReconciliationData(comparedData);\n    }\n  }, [internalTrades, externalTrades]);\n\n  console.log('Reconciliation Data:', reconciliationData)\n\n  return {\n    trades: reconciliationData,\n    isLoading: internalLoading || externalLoading,\n    error: internalError || externalError\n  }\n} "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,aAAa,EAAEC,iBAAiB,QAAQ,6BAA6B;AAE9E,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEhE,MAAM;IACJW,IAAI,EAAEC,cAAc;IACpBC,KAAK,EAAEC,aAAa;IACpBC,SAAS,EAAEC;EACb,CAAC,GAAGd,QAAQ,CAAC;IACXe,QAAQ,EAAE,CAAC,gBAAgB,CAAC;IAC5BC,OAAO,EAAEf;EACX,CAAC,CAAC;EAEF,MAAM;IACJQ,IAAI,EAAEQ,cAAc;IACpBN,KAAK,EAAEO,aAAa;IACpBL,SAAS,EAAEM;EACb,CAAC,GAAGnB,QAAQ,CAAC;IACXe,QAAQ,EAAE,CAAC,gBAAgB,CAAC;IAC5BC,OAAO,EAAEd;EACX,CAAC,CAAC;EAEFH,SAAS,CAAC,MAAM;IACd,IAAIW,cAAc,IAAIO,cAAc,EAAE;MACpCG,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEX,cAAc,CAAC;MAC/CU,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEJ,cAAc,CAAC;MAE/C,MAAMK,YAAY,GAAGZ,cAAc,CAACa,GAAG,CAACC,QAAQ,IAAI;QAAA,IAAAC,qBAAA;QAClD,MAAMC,aAAa,GAAG,EAAAD,qBAAA,GAAAD,QAAQ,CAACG,iBAAiB,cAAAF,qBAAA,uBAA1BA,qBAAA,CAA4BG,WAAW,CAAC,CAAC,MAAK,SAAS,GACzExB,iBAAiB,CAACoB,QAAQ,EAAEP,cAAc,CAAC,GAC3C,IAAI;QAERG,OAAO,CAACC,GAAG,CAAC,SAASG,QAAQ,CAACK,cAAc,GAAG,EAAE;UAC/CC,MAAM,EAAEN,QAAQ,CAACG,iBAAiB;UAClCI,QAAQ,EAAE,CAAC,CAACL,aAAa;UACzBA;QACF,CAAC,CAAC;QAEF,MAAMM,UAAU,GAAGN,aAAa,GAAGvB,aAAa,CAACqB,QAAQ,EAAEE,aAAa,CAAC,GAAG,IAAI;QAEhF,OAAO;UACL,GAAGF,QAAQ;UACXE,aAAa;UACbM,UAAU;UACVC,QAAQ,EAAE,CAAAD,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEE,cAAc,KAAI,CAACR;QAC3C,CAAC;MACH,CAAC,CAAC;MAEFN,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,YAAY,CAAC;MAC3Cd,qBAAqB,CAACc,YAAY,CAAC;IACrC;EACF,CAAC,EAAE,CAACZ,cAAc,EAAEO,cAAc,CAAC,CAAC;EAEpCG,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEd,kBAAkB,CAAC;EAEvD,OAAO;IACL4B,MAAM,EAAE5B,kBAAkB;IAC1BM,SAAS,EAAEC,eAAe,IAAIK,eAAe;IAC7CR,KAAK,EAAEC,aAAa,IAAIM;EAC1B,CAAC;AACH,CAAC;AAAAZ,EAAA,CA3DYD,SAAS;EAAA,QAOhBL,QAAQ,EASRA,QAAQ;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}