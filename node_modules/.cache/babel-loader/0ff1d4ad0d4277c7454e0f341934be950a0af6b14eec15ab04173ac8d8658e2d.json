{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { fetchInternalTrades } from '../services/supabase';\nimport { fetchExternalTrades } from '../services/tradeApi';\nimport { compareTrades, findMatchingTrade } from '../services/tradeComparison';\nexport const useTrades = () => {\n  _s();\n  const [reconciliationData, setReconciliationData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [internalTrades, setInternalTrades] = useState(null);\n  const [externalTrades, setExternalTrades] = useState(null);\n\n  // Fetch both internal and external trades\n  useEffect(() => {\n    const fetchTrades = async () => {\n      try {\n        setIsLoading(true);\n        const [internal, external] = await Promise.all([fetchInternalTrades(), fetchExternalTrades()]);\n        setInternalTrades(internal);\n        setExternalTrades(external);\n      } catch (err) {\n        setError(err);\n        console.error('Error fetching trades:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTrades();\n  }, []);\n\n  // Process trades when both are available\n  useEffect(() => {\n    if (internalTrades && externalTrades) {\n      console.log('Internal Trades:', internalTrades);\n      console.log('External Trades:', externalTrades);\n      const comparedData = internalTrades.map(intTrade => {\n        var _intTrade$comparison_;\n        const matchingTrade = ((_intTrade$comparison_ = intTrade.comparison_status) === null || _intTrade$comparison_ === void 0 ? void 0 : _intTrade$comparison_.toUpperCase()) === 'MATCHED' ? findMatchingTrade(intTrade, externalTrades) : null;\n        console.log(`Trade ${intTrade.securitysymbol}:`, {\n          status: intTrade.comparison_status,\n          hasMatch: !!matchingTrade,\n          matchingTrade\n        });\n        const comparison = matchingTrade ? compareTrades(intTrade, matchingTrade) : null;\n        return {\n          ...intTrade,\n          matchingTrade,\n          comparison,\n          hasBreak: (comparison === null || comparison === void 0 ? void 0 : comparison.hasDiscrepancy) || !matchingTrade\n        };\n      });\n      console.log('Compared Data:', comparedData);\n      setReconciliationData(comparedData);\n    }\n  }, [internalTrades, externalTrades]);\n  console.log('Reconciliation Data:', reconciliationData);\n  return {\n    trades: reconciliationData,\n    isLoading,\n    error\n  };\n};\n_s(useTrades, \"tFPeLkUImTdXhmInfILxIxsQ+Eg=\");","map":{"version":3,"names":["useState","useEffect","fetchInternalTrades","fetchExternalTrades","compareTrades","findMatchingTrade","useTrades","_s","reconciliationData","setReconciliationData","isLoading","setIsLoading","error","setError","internalTrades","setInternalTrades","externalTrades","setExternalTrades","fetchTrades","internal","external","Promise","all","err","console","log","comparedData","map","intTrade","_intTrade$comparison_","matchingTrade","comparison_status","toUpperCase","securitysymbol","status","hasMatch","comparison","hasBreak","hasDiscrepancy","trades"],"sources":["/Users/joelaird/TradeRecon/src/hooks/useTrades.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { fetchInternalTrades } from '../services/supabase'\nimport { fetchExternalTrades } from '../services/tradeApi'\nimport { compareTrades, findMatchingTrade } from '../services/tradeComparison'\n\nexport const useTrades = () => {\n  const [reconciliationData, setReconciliationData] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [internalTrades, setInternalTrades] = useState(null)\n  const [externalTrades, setExternalTrades] = useState(null)\n\n  // Fetch both internal and external trades\n  useEffect(() => {\n    const fetchTrades = async () => {\n      try {\n        setIsLoading(true)\n        const [internal, external] = await Promise.all([\n          fetchInternalTrades(),\n          fetchExternalTrades()\n        ])\n        setInternalTrades(internal)\n        setExternalTrades(external)\n      } catch (err) {\n        setError(err)\n        console.error('Error fetching trades:', err)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchTrades()\n  }, [])\n\n  // Process trades when both are available\n  useEffect(() => {\n    if (internalTrades && externalTrades) {\n      console.log('Internal Trades:', internalTrades)\n      console.log('External Trades:', externalTrades)\n      \n      const comparedData = internalTrades.map(intTrade => {\n        const matchingTrade = intTrade.comparison_status?.toUpperCase() === 'MATCHED' \n          ? findMatchingTrade(intTrade, externalTrades)\n          : null;\n\n        console.log(`Trade ${intTrade.securitysymbol}:`, {\n          status: intTrade.comparison_status,\n          hasMatch: !!matchingTrade,\n          matchingTrade\n        });\n        \n        const comparison = matchingTrade ? compareTrades(intTrade, matchingTrade) : null;\n        \n        return {\n          ...intTrade,\n          matchingTrade,\n          comparison,\n          hasBreak: comparison?.hasDiscrepancy || !matchingTrade\n        };\n      });\n      \n      console.log('Compared Data:', comparedData);\n      setReconciliationData(comparedData);\n    }\n  }, [internalTrades, externalTrades]);\n\n  console.log('Reconciliation Data:', reconciliationData)\n\n  return {\n    trades: reconciliationData,\n    isLoading,\n    error\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}