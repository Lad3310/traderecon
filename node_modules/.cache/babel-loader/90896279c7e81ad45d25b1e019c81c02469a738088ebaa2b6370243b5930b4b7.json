{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useQuery } from 'react-query';\nimport { fetchInternalTrades } from '../services/supabase';\nimport { fetchExternalTrades } from '../services/tradeApi';\nimport { compareTrades, findMatchingTrade } from '../services/tradeComparison';\nexport const useTrades = () => {\n  _s();\n  const [reconciliationData, setReconciliationData] = useState([]);\n  const {\n    data: internalTrades,\n    error: internalError,\n    isLoading: internalLoading\n  } = useQuery('internalTrades', fetchInternalTrades);\n  const {\n    data: externalTrades,\n    error: externalError,\n    isLoading: externalLoading\n  } = useQuery('externalTrades', fetchExternalTrades);\n  useEffect(() => {\n    if (internalTrades && externalTrades) {\n      const comparedData = internalTrades.map(intTrade => {\n        const matchingTrade = findMatchingTrade(intTrade, externalTrades);\n        const comparison = matchingTrade ? compareTrades(intTrade, matchingTrade) : null;\n        return {\n          ...intTrade,\n          matchingTrade,\n          comparison,\n          hasBreak: (comparison === null || comparison === void 0 ? void 0 : comparison.hasDiscrepancy) || !matchingTrade\n        };\n      });\n      setReconciliationData(comparedData);\n    }\n  }, [internalTrades, externalTrades]);\n  console.log('Reconciliation Data:', reconciliationData);\n  return {\n    trades: reconciliationData,\n    isLoading: internalLoading || externalLoading,\n    error: internalError || externalError\n  };\n};\n_s(useTrades, \"7Mey/mfaBxSbd6WIFiqplJUyiWU=\", false, function () {\n  return [useQuery, useQuery];\n});","map":{"version":3,"names":["useState","useEffect","useQuery","fetchInternalTrades","fetchExternalTrades","compareTrades","findMatchingTrade","useTrades","_s","reconciliationData","setReconciliationData","data","internalTrades","error","internalError","isLoading","internalLoading","externalTrades","externalError","externalLoading","comparedData","map","intTrade","matchingTrade","comparison","hasBreak","hasDiscrepancy","console","log","trades"],"sources":["/Users/joelaird/TradeRecon/src/hooks/useTrades.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { useQuery } from 'react-query'\nimport { fetchInternalTrades } from '../services/supabase'\nimport { fetchExternalTrades } from '../services/tradeApi'\nimport { compareTrades, findMatchingTrade } from '../services/tradeComparison'\n\nexport const useTrades = () => {\n  const [reconciliationData, setReconciliationData] = useState([])\n\n  const { \n    data: internalTrades,\n    error: internalError,\n    isLoading: internalLoading\n  } = useQuery('internalTrades', fetchInternalTrades)\n\n  const {\n    data: externalTrades,\n    error: externalError,\n    isLoading: externalLoading\n  } = useQuery('externalTrades', fetchExternalTrades)\n\n  useEffect(() => {\n    if (internalTrades && externalTrades) {\n      const comparedData = internalTrades.map(intTrade => {\n        const matchingTrade = findMatchingTrade(intTrade, externalTrades)\n        const comparison = matchingTrade ? compareTrades(intTrade, matchingTrade) : null\n        \n        return {\n          ...intTrade,\n          matchingTrade,\n          comparison,\n          hasBreak: comparison?.hasDiscrepancy || !matchingTrade\n        }\n      })\n      \n      setReconciliationData(comparedData)\n    }\n  }, [internalTrades, externalTrades])\n\n  console.log('Reconciliation Data:', reconciliationData)\n\n  return {\n    trades: reconciliationData,\n    isLoading: internalLoading || externalLoading,\n    error: internalError || externalError\n  }\n} "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,aAAa,EAAEC,iBAAiB,QAAQ,6BAA6B;AAE9E,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEhE,MAAM;IACJW,IAAI,EAAEC,cAAc;IACpBC,KAAK,EAAEC,aAAa;IACpBC,SAAS,EAAEC;EACb,CAAC,GAAGd,QAAQ,CAAC,gBAAgB,EAAEC,mBAAmB,CAAC;EAEnD,MAAM;IACJQ,IAAI,EAAEM,cAAc;IACpBJ,KAAK,EAAEK,aAAa;IACpBH,SAAS,EAAEI;EACb,CAAC,GAAGjB,QAAQ,CAAC,gBAAgB,EAAEE,mBAAmB,CAAC;EAEnDH,SAAS,CAAC,MAAM;IACd,IAAIW,cAAc,IAAIK,cAAc,EAAE;MACpC,MAAMG,YAAY,GAAGR,cAAc,CAACS,GAAG,CAACC,QAAQ,IAAI;QAClD,MAAMC,aAAa,GAAGjB,iBAAiB,CAACgB,QAAQ,EAAEL,cAAc,CAAC;QACjE,MAAMO,UAAU,GAAGD,aAAa,GAAGlB,aAAa,CAACiB,QAAQ,EAAEC,aAAa,CAAC,GAAG,IAAI;QAEhF,OAAO;UACL,GAAGD,QAAQ;UACXC,aAAa;UACbC,UAAU;UACVC,QAAQ,EAAE,CAAAD,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEE,cAAc,KAAI,CAACH;QAC3C,CAAC;MACH,CAAC,CAAC;MAEFb,qBAAqB,CAACU,YAAY,CAAC;IACrC;EACF,CAAC,EAAE,CAACR,cAAc,EAAEK,cAAc,CAAC,CAAC;EAEpCU,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEnB,kBAAkB,CAAC;EAEvD,OAAO;IACLoB,MAAM,EAAEpB,kBAAkB;IAC1BM,SAAS,EAAEC,eAAe,IAAIG,eAAe;IAC7CN,KAAK,EAAEC,aAAa,IAAII;EAC1B,CAAC;AACH,CAAC;AAAAV,EAAA,CAxCYD,SAAS;EAAA,QAOhBL,QAAQ,EAMRA,QAAQ;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}