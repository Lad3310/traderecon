{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../../lib/supabaseClient';\nexport const useContacts = () => {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch all contacts\n  const fetchContacts = async () => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('contacts').select('*').order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      setContacts(data);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add new contact\n  const addContact = async newContact => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('contacts').insert([newContact]).select();\n      if (error) throw error;\n      setContacts(prev => [data[0], ...prev]);\n      return {\n        success: true\n      };\n    } catch (error) {\n      setError(error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Update contact\n  const updateContact = async (id, updates) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('contacts').update(updates).eq('id', id).select();\n      if (error) throw error;\n      setContacts(prev => prev.map(contact => contact.id === id ? data[0] : contact));\n      return {\n        success: true\n      };\n    } catch (error) {\n      setError(error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Delete contact\n  const deleteContact = async id => {\n    try {\n      const {\n        error\n      } = await supabase.from('contacts').delete().eq('id', id);\n      if (error) throw error;\n      setContacts(prev => prev.filter(contact => contact.id !== id));\n      return {\n        success: true\n      };\n    } catch (error) {\n      setError(error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n  return {\n    contacts,\n    loading,\n    error,\n    addContact,\n    updateContact,\n    deleteContact,\n    refreshContacts: fetchContacts\n  };\n};\n_s(useContacts, \"7pjivTfx4GY3jCOsbtmEhlleMPE=\");","map":{"version":3,"names":["useState","useEffect","supabase","useContacts","_s","contacts","setContacts","loading","setLoading","error","setError","fetchContacts","data","from","select","order","ascending","message","addContact","newContact","insert","prev","success","updateContact","id","updates","update","eq","map","contact","deleteContact","delete","filter","refreshContacts"],"sources":["/Users/joelaird/TradeRecon/src/hooks/useContacts.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from '../../lib/supabaseClient';\n\nexport const useContacts = () => {\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch all contacts\n  const fetchContacts = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('contacts')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setContacts(data);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add new contact\n  const addContact = async (newContact) => {\n    try {\n      const { data, error } = await supabase\n        .from('contacts')\n        .insert([newContact])\n        .select();\n\n      if (error) throw error;\n      setContacts(prev => [data[0], ...prev]);\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Update contact\n  const updateContact = async (id, updates) => {\n    try {\n      const { data, error } = await supabase\n        .from('contacts')\n        .update(updates)\n        .eq('id', id)\n        .select();\n\n      if (error) throw error;\n      setContacts(prev => prev.map(contact => \n        contact.id === id ? data[0] : contact\n      ));\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Delete contact\n  const deleteContact = async (id) => {\n    try {\n      const { error } = await supabase\n        .from('contacts')\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n      setContacts(prev => prev.filter(contact => contact.id !== id));\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  return {\n    contacts,\n    loading,\n    error,\n    addContact,\n    updateContact,\n    deleteContact,\n    refreshContacts: fetchContacts\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}