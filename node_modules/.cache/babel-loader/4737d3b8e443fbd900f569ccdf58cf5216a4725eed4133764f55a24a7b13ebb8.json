{"ast":null,"code":"// Mock data to simulate external API response\nconst mockExternalTrades = [{\n  // Match for TSLA Pershing trade\n  tradeId: '1',\n  tradedate: '2024-11-30',\n  securitysymbol: 'TSLA',\n  price: 390.00,\n  quantity: 1,\n  settlementdate: '2024-12-01',\n  counterparty: 'Pershing',\n  dtc_number: '0443'\n}, {\n  // Match for SPOT Pershing trade\n  tradeId: '2',\n  tradedate: '2024-11-30',\n  securitysymbol: 'SPOT',\n  price: 498.00,\n  quantity: 363,\n  settlementdate: '2024-12-01',\n  counterparty: 'Pershing',\n  dtc_number: '0443'\n}, {\n  // Match for NET Citadel trade\n  tradeId: '3',\n  tradedate: '2024-11-30',\n  securitysymbol: 'NET',\n  price: 115.00,\n  quantity: 69,\n  settlementdate: '2024-12-01',\n  counterparty: 'Citadel',\n  dtc_number: '0388'\n}, {\n  // Match for NVDA Citadel trade\n  tradeId: '4',\n  tradedate: '2024-11-30',\n  securitysymbol: 'NVDA',\n  price: 140.00,\n  quantity: 451,\n  settlementdate: '2024-12-01',\n  counterparty: 'Citadel',\n  dtc_number: '0388'\n}, {\n  // Match for SHOP Citadel trade\n  tradeId: '5',\n  tradedate: '2024-11-30',\n  securitysymbol: 'SHOP',\n  price: 120.00,\n  quantity: 319,\n  settlementdate: '2024-12-01',\n  counterparty: 'Citadel',\n  dtc_number: '0388'\n}, {\n  // Match for SPOT Goldman Sachs trade\n  tradeId: '6',\n  tradedate: '2024-11-30',\n  securitysymbol: 'SPOT',\n  price: 498.00,\n  quantity: 437,\n  settlementdate: '2024-12-01',\n  counterparty: 'Goldman Sachs',\n  dtc_number: '0005'\n}, {\n  // Match for TSLA Goldman Sachs trade\n  tradeId: '7',\n  tradedate: '2024-11-30',\n  securitysymbol: 'TSLA',\n  price: 390.00,\n  quantity: 351,\n  settlementdate: '2024-12-01',\n  counterparty: 'Goldman Sachs',\n  dtc_number: '0005'\n}\n// No matches for Morgan Stanley and JP Morgan trades to simulate UNMATCHED status\n];\nexport const fetchExternalTrades = async () => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Return mock data\n  return mockExternalTrades;\n};","map":{"version":3,"names":["mockExternalTrades","tradeId","tradedate","securitysymbol","price","quantity","settlementdate","counterparty","dtc_number","fetchExternalTrades","Promise","resolve","setTimeout"],"sources":["/Users/joelaird/TradeRecon/src/services/tradeApi.js"],"sourcesContent":["// Mock data to simulate external API response\nconst mockExternalTrades = [\n  {\n    // Match for TSLA Pershing trade\n    tradeId: '1',\n    tradedate: '2024-11-30',\n    securitysymbol: 'TSLA',\n    price: 390.00,\n    quantity: 1,\n    settlementdate: '2024-12-01',\n    counterparty: 'Pershing',\n    dtc_number: '0443'\n  },\n  {\n    // Match for SPOT Pershing trade\n    tradeId: '2',\n    tradedate: '2024-11-30',\n    securitysymbol: 'SPOT',\n    price: 498.00,\n    quantity: 363,\n    settlementdate: '2024-12-01',\n    counterparty: 'Pershing',\n    dtc_number: '0443'\n  },\n  {\n    // Match for NET Citadel trade\n    tradeId: '3',\n    tradedate: '2024-11-30',\n    securitysymbol: 'NET',\n    price: 115.00,\n    quantity: 69,\n    settlementdate: '2024-12-01',\n    counterparty: 'Citadel',\n    dtc_number: '0388'\n  },\n  {\n    // Match for NVDA Citadel trade\n    tradeId: '4',\n    tradedate: '2024-11-30',\n    securitysymbol: 'NVDA',\n    price: 140.00,\n    quantity: 451,\n    settlementdate: '2024-12-01',\n    counterparty: 'Citadel',\n    dtc_number: '0388'\n  },\n  {\n    // Match for SHOP Citadel trade\n    tradeId: '5',\n    tradedate: '2024-11-30',\n    securitysymbol: 'SHOP',\n    price: 120.00,\n    quantity: 319,\n    settlementdate: '2024-12-01',\n    counterparty: 'Citadel',\n    dtc_number: '0388'\n  },\n  {\n    // Match for SPOT Goldman Sachs trade\n    tradeId: '6',\n    tradedate: '2024-11-30',\n    securitysymbol: 'SPOT',\n    price: 498.00,\n    quantity: 437,\n    settlementdate: '2024-12-01',\n    counterparty: 'Goldman Sachs',\n    dtc_number: '0005'\n  },\n  {\n    // Match for TSLA Goldman Sachs trade\n    tradeId: '7',\n    tradedate: '2024-11-30',\n    securitysymbol: 'TSLA',\n    price: 390.00,\n    quantity: 351,\n    settlementdate: '2024-12-01',\n    counterparty: 'Goldman Sachs',\n    dtc_number: '0005'\n  }\n  // No matches for Morgan Stanley and JP Morgan trades to simulate UNMATCHED status\n];\n\nexport const fetchExternalTrades = async () => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  // Return mock data\n  return mockExternalTrades;\n}; "],"mappings":"AAAA;AACA,MAAMA,kBAAkB,GAAG,CACzB;EACE;EACAC,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,CAAC;EACXC,cAAc,EAAE,YAAY;EAC5BC,YAAY,EAAE,UAAU;EACxBC,UAAU,EAAE;AACd,CAAC,EACD;EACE;EACAP,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,GAAG;EACbC,cAAc,EAAE,YAAY;EAC5BC,YAAY,EAAE,UAAU;EACxBC,UAAU,EAAE;AACd,CAAC,EACD;EACE;EACAP,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,KAAK;EACrBC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,EAAE;EACZC,cAAc,EAAE,YAAY;EAC5BC,YAAY,EAAE,SAAS;EACvBC,UAAU,EAAE;AACd,CAAC,EACD;EACE;EACAP,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,GAAG;EACbC,cAAc,EAAE,YAAY;EAC5BC,YAAY,EAAE,SAAS;EACvBC,UAAU,EAAE;AACd,CAAC,EACD;EACE;EACAP,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,GAAG;EACbC,cAAc,EAAE,YAAY;EAC5BC,YAAY,EAAE,SAAS;EACvBC,UAAU,EAAE;AACd,CAAC,EACD;EACE;EACAP,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,GAAG;EACbC,cAAc,EAAE,YAAY;EAC5BC,YAAY,EAAE,eAAe;EAC7BC,UAAU,EAAE;AACd,CAAC,EACD;EACE;EACAP,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,GAAG;EACbC,cAAc,EAAE,YAAY;EAC5BC,YAAY,EAAE,eAAe;EAC7BC,UAAU,EAAE;AACd;AACA;AAAA,CACD;AAED,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C;EACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEvD;EACA,OAAOX,kBAAkB;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}